mod fixture;

use fixture::start_instance;
use ipnet::IpNet;
use network::{send_command, NetInfo, NetworkCommand, NetworkResponse, State};
use rstest::rstest;
use std::net::IpAddr;
use std::sync::Arc;

#[rstest]
#[tokio::test]
async fn test_ip_configuration(start_instance: &Arc<State>) {
    if let NetworkResponse::IP(Some(ipconfig)) = send_command(
        Arc::clone(start_instance),
        NetworkCommand::GetIP4Config("virtbr0".to_string()),
    )
    .await
    .unwrap()
    {
        println!("{:?}", ipconfig);
    }
    if let NetworkResponse::IP(Some(ipconfig)) = send_command(
        Arc::clone(start_instance),
        NetworkCommand::GetIP6Config("virtbr0".to_string()),
    )
    .await
    .unwrap()
    {
        println!("{:?}", ipconfig);
    }
}

/*
#[rstest]
#[tokio::test]
async fn test_modify_ip_configuration(start_instance: &Arc<State>) {
    if let NetworkResponse::ListDeivces(devices) =
        send_command(Arc::clone(start_instance), NetworkCommand::ListDeivces)
            .await
            .unwrap()
    {
        for device in devices {
            send_command(
                Arc::clone(start_instance),
                NetworkCommand::CreateWiredConnection("test_con1".to_string(), device.mac),
            )
            .await
            .unwrap();
            break;
        }
    }
    let gw: IpAddr = "192.168.101.1".parse().unwrap();
    let addresses: Vec<IpNet> = vec!["192.168.101.38/24".parse().unwrap()];
    let ip4_config = NetInfo {
        method: String::from("manual"),
        addresses,
        gateway: Some(gw),
        dns: vec![gw],
        routes: vec![],
    };
    send_command(
        Arc::clone(start_instance),
        NetworkCommand::UpdateIP4Config(String::from("test_con1"), ip4_config),
    )
    .await
    .unwrap();
    if let NetworkResponse::IP(Some(ipconfig)) = send_command(
        Arc::clone(start_instance),
        NetworkCommand::GetIP4Config("test_con1".to_string()),
    )
    .await
    .unwrap()
    {
        println!("{:?}", ipconfig);
    }
    tokio::time::sleep(std::time::Duration::from_secs(5)).await;
    let gw: IpAddr = "fe80::5c51:8df8:ee41:d98a".parse().unwrap();
    let addresses: Vec<IpNet> = vec!["fe80::5c51:8df8:ee41:d98a/64".parse().unwrap()];
    let ip6_config = NetInfo {
        method: String::from("manual"),
        addresses,
        gateway: Some(gw),
        dns: vec![gw],
        routes: vec![],
    };
    send_command(
        Arc::clone(start_instance),
        NetworkCommand::UpdateIP6Config(String::from("test_con1"), ip6_config),
    )
    .await
    .unwrap();
    if let NetworkResponse::IP(Some(ipconfig)) = send_command(
        Arc::clone(start_instance),
        NetworkCommand::GetIP6Config("test_con1".to_string()),
    )
    .await
    .unwrap()
    {
        println!("{:?}", ipconfig);
    }
    if let NetworkResponse::ListConnection(conns) =
        send_command(Arc::clone(start_instance), NetworkCommand::ListConnections)
            .await
            .unwrap()
    {
        for conn in conns {
            if conn.name.contains("test_con1") {
                send_command(
                    Arc::clone(start_instance),
                    NetworkCommand::DeleteConnection(conn.name),
                )
                .await
                .unwrap();
            }
        }
    }
}
*/
